"""Toy problem test case."""

import numpy as np
from case import Case

from mma import Bounds, Options


def toy(
    xval: np.ndarray,
) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:
    """Define a toy problem.

    Minimize:
         x(1)^2 + x(2)^2 + x(3)^2

    Subject to:
        (x(1)-5)^2 + (x(2)-2)^2 + (x(3)-1)^2 <= 9
        (x(1)-3)^2 + (x(2)-4)^2 + (x(3)-3)^2 <= 9
        0 <= x(j) <= 5, for j=1,2,3.
    """
    f0val = np.sum(xval**2, keepdims=True)
    df0dx = 2 * xval
    fval1 = np.sum((xval.T - np.array([[5, 2, 1]])) ** 2) - 9
    fval2 = np.sum((xval.T - np.array([[3, 4, 3]])) ** 2) - 9
    fval = np.array([[fval1, fval2]]).T
    dfdx1 = 2 * (xval.T - np.array([[5, 2, 1]]))
    dfdx2 = 2 * (xval.T - np.array([[3, 4, 3]]))
    dfdx = np.concatenate((dfdx1, dfdx2))
    return f0val, df0dx, fval, dfdx


case_toy = Case(
    toy,
    np.array([[4, 3, 2]]).T,
    Bounds(0, 5),
    Options(iteration_count=11, move_limit=1),
    kktnorms=np.array(
        [
            4.307115201941678,
            0.6221210867839285,
            0.02221729585724501,
            0.004514848168456325,
            0.0015626630207070617,
            0.00035034849134041524,
            4.046232679602292e-05,
            2.494070630787751e-06,
            8.220819329845235e-07,
            3.844920078255069e-07,
            4.3359496454658805e-07,
        ]
    ),
    vec1=np.array(
        [
            [9.9599287, -2.15166048, 0.21519475],
            [8.80303134, -0.11433839, 0.02320731],
            [8.77032876e00, -1.98047257e-04, 1.64412280e-05],
            [8.77024960e00, 7.88739252e-07, -2.46903902e-06],
            [8.77024658e00, 8.20107875e-08, -6.17503177e-07],
            [8.77024613e00, -1.80068287e-07, -1.85263591e-07],
            [8.77024610e00, -2.31151580e-07, -1.33492204e-07],
            [8.77024610e00, -2.34501032e-07, -1.31555208e-07],
            [8.77024610e00, -2.34509775e-07, -1.31552747e-07],
            [8.77024610e00, -2.34510143e-07, -1.31552799e-07],
            [8.77024610e00, -2.34510360e-07, -1.31552859e-07],
        ]
    ),
    vec2=np.array(
        [
            [2.39029817, 1.8057194, 0.99286496],
            [2.03845206, 1.76235892, 1.24170671],
            [2.01779333, 1.77855703, 1.23918268],
            [2.01762573, 1.77936919, 1.23825735],
            [2.01755448, 1.7797962, 1.23775845],
            [2.01752587, 1.77996796, 1.2375579],
            [2.01751893, 1.78000961, 1.2375093],
            [2.01751858, 1.78001172, 1.23750683],
            [2.01751864, 1.78001134, 1.23750728],
            [2.01751863, 1.78001144, 1.23750716],
            [2.01751862, 1.78001145, 1.23750715],
        ]
    ),
)
