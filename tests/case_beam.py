"""Test case beam-like problem."""

import numpy as np
from case import Case

from mma import Bounds, Options


def beam(
    xval: np.ndarray,
) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:
    """Define the beam problem from the MMA paper of Svanberg.

    Minimize:
        c1 * (x(1) + x(2) + x(3) + x(4) + x(5))
        c1 = 0.0624

    Subject to:
        a1/x(1)^3 + a2/x(2)^3 + a3/x(3)^3 + a4/x(4)^3 + a5/x(5)^3 <= 1
        a1 = 61, a2 = 37, a3 = 19, a4 = 7, a5 = 1
        1 <= x(j) <= 10, for j = 1, ..., 5.
    """
    c1 = 0.0624
    ai = np.array([[61.0, 37.0, 19.0, 7.0, 1.0]]).T
    f0val = c1 * np.sum(xval, keepdims=True)
    df0dx = c1 * np.ones_like(xval)
    fval = np.sum(ai / xval**3, keepdims=True) - 1
    dfdx = -3 * (ai / xval**4).T
    return f0val, df0dx, fval, dfdx


case_beam = Case(
    beam,
    5 * np.ones((5, 1)),
    Bounds(1, 10),
    Options(iteration_count=11, move_limit=1),
    kktnorms=np.array(
        [
            0.1713700615359313,
            0.0477600074107826,
            0.01586858883842016,
            0.0009155557291830817,
            0.00013376644579848646,
            5.3658261909150557e-05,
            1.956672273966679e-05,
            5.204742906400834e-06,
            9.118765191405042e-07,
            5.461111102383901e-07,
            4.974265548852596e-07,
        ]
    ),
    vec1=np.array(
        [
            [1.27589019, 0.16701619],
            [1.32686504, 0.03986538],
            [1.33608675, 0.00990566],
            [1.33963603e00, 7.21202576e-04],
            [1.33995611e00, 7.83411204e-07],
            [1.33995647e00, -2.09947204e-07],
            [1.33995646e00, -2.18743497e-07],
            [1.33995646e00, -2.22847060e-07],
            [1.33995646e00, -2.23695552e-07],
            [1.33995646e00, -2.23786219e-07],
            [1.33995646e00, -2.23787900e-07],
        ]
    ),
    vec2=np.array(
        [
            [5.69660059, 5.14097443, 4.39647075, 3.3532998, 1.85961258],
            [5.83754827, 5.18154196, 4.3913256, 3.44346228, 2.40998476],
            [6.00710096, 5.31996741, 4.52356742, 3.50024664, 2.06076424],
            [6.01315803, 5.30330065, 4.49704538, 3.49950948, 2.15551254],
            [6.01626867, 5.30797485, 4.495254, 3.50079599, 2.15336216],
            [6.01603949, 5.30874578, 4.49465751, 3.50118668, 2.15303197],
            [6.01602638, 5.30905973, 4.4943874, 3.5013736, 2.15281411],
            [6.01601425, 5.30915879, 4.49432974, 3.50145123, 2.15270723],
            [6.01601529, 5.30917359, 4.49432894, 3.5014725, 2.1526709],
            [6.01601594, 5.30917409, 4.49433026, 3.50147545, 2.15266549],
            [6.01601605, 5.30917414, 4.49432984, 3.50147531, 2.15266589],
        ]
    ),
)
