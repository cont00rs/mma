"""Test case single function two variables two bounds."""

import numpy as np
from case import Case

from mma import Bounds, Options


def funct2(
    xval: np.ndarray,
) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:
    """Define a simple function with two variables and bounds.

    Minimize:
        (x1 - 50)^2 + (x2 - 25)^2 + 25

    Subject to:
        1 <= x(j) <= 100, for j = 1, 2
    """
    f0val = np.array([(xval[0][0] - 50) ** 2 + (xval[1][0] - 25) ** 2 + 25])
    df0dx = np.array([2 * (xval[0] - 50), 2 * (xval[1] - 25)])
    fval = np.zeros((1,))
    dfdx = np.zeros_like(xval.T)
    return f0val, df0dx, fval, dfdx


case_funct_2 = Case(
    funct2,
    np.ones((2, 1)),
    Bounds(1, 100),
    Options(iteration_count=20, move_limit=0.2),
    kktnorms=np.array(
        [
            4.389907158138708837e03,
            1.780515962835242817e03,
            5.440483836432222233e02,
            5.543734765410015370e02,
            4.369916904631635930e02,
            3.457793533925804468e02,
            2.438711443835117620e02,
            1.633095903397531572e02,
            2.107910987388376327e02,
            9.929051154084598352e01,
            1.200302598380304175e02,
            6.096678635085800835e01,
            7.589661548990709150e01,
            4.241041516496115094e01,
            1.598142577132789022e01,
            1.978312946212271228e01,
            1.592645636539575804e01,
            5.609196804877952580e00,
            1.256924475284590237e01,
            5.609233926049583374e00,
        ]
    ),
    vec1=np.array(
        [
            [895.28000015, 0.0],
            [356.71999924, 0.0],
            [150.79999987, 0.0],
            [356.71999864, 0.0],
            [150.79999996, 0.0],
            [313.20854588, 0.0],
            [134.85268873, 0.0],
            [109.072633, 0.0],
            [67.99620234, 0.0],
            [47.92382225, 0.0],
            [38.04980601, 0.0],
            [33.23852209, 0.0],
            [30.86209816, 0.0],
            [27.71276435, 0.0],
            [25.86304184, 0.0],
            [26.4990517, 0.0],
            [25.08067454, 0.0],
            [25.95569519, 0.0],
            [25.08067534, 0.0],
            [25.95569237, 0.0],
        ]
    ),
    vec2=np.array(
        [
            [20.8, 20.8],
            [40.59999999, 40.59999997],
            [60.39999999, 20.79999998],
            [40.59999999, 40.59999995],
            [60.39999998, 20.79999996],
            [40.59999999, 39.13677989],
            [60.39999998, 26.30103391],
            [44.9971048, 17.31601193],
            [55.77913139, 28.09803853],
            [48.23171279, 20.55061998],
            [53.51490568, 25.83381297],
            [49.81667062, 22.13557817],
            [52.40543368, 24.72434267],
            [50.59329858, 26.53647686],
            [49.3248044, 24.36191478],
            [50.84699757, 25.88410792],
            [49.78146239, 24.81857273],
            [50.6724611, 25.70957118],
            [49.78146152, 24.81857157],
            [50.67246023, 25.70957002],
        ]
    ),
)
